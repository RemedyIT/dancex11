/*
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 */
#ifndef CDP_HPP
#define CDP_HPP

#include "xsc_xml_handlers_export.h"
// Forward declarations.
namespace DAnCE
{
  namespace Config_Handlers
  {
    class PlanSubcomponentPropertyReference;
    class PlanPropertyMapping;
    class deploymentPlan;
  }
}

#include <memory>
#include <string>
#include <vector>
#include "ace/XML_Utils/XMLSchema/Types.hpp"
#include "ace/XML_Utils/XMLSchema/id_map.hpp"
#include "tao/x11/base/stddef.h"
#include "ccd.hpp"

namespace DAnCE
{
  namespace Config_Handlers
  {
    class XSC_XML_Handlers_Export PlanSubcomponentPropertyReference : public ::XSCRT::Type
    {
      using Base = ::XSCRT::Type;

      // propertyName
      public:
      ::XMLSchema::string<char> const& propertyName () const;
      void propertyName (::XMLSchema::string<char> const&);

      protected:
      using propertyName_type = std::unique_ptr<::XMLSchema::string<char>>;
      propertyName_type propertyName_;

      // instance
      public:
      ::DAnCE::Config_Handlers::InstanceDeploymentDescription const& instance () const;
      void instance (::DAnCE::Config_Handlers::InstanceDeploymentDescription const&);

      protected:
      using instance_type = std::unique_ptr<::DAnCE::Config_Handlers::InstanceDeploymentDescription>;
      instance_type instance_;

      public:
      PlanSubcomponentPropertyReference (::XMLSchema::string<char> const& propertyName__,
                                         ::DAnCE::Config_Handlers::InstanceDeploymentDescription const& instance__);

      explicit PlanSubcomponentPropertyReference (::XSCRT::XML::Element<char> const&);
      PlanSubcomponentPropertyReference (PlanSubcomponentPropertyReference const& s);
      PlanSubcomponentPropertyReference& operator= (PlanSubcomponentPropertyReference const& s);

      PlanSubcomponentPropertyReference (PlanSubcomponentPropertyReference&&) = default;
      PlanSubcomponentPropertyReference& operator= (PlanSubcomponentPropertyReference&&) = default;
    };


    class XSC_XML_Handlers_Export PlanPropertyMapping : public ::XSCRT::Type
    {
      using Base = ::XSCRT::Type;

      // name
      public:
      ::XMLSchema::string<char> const& name () const;
      void name (::XMLSchema::string<char> const&);

      protected:
      using name_type = std::unique_ptr<::XMLSchema::string<char>>;
      name_type name_;

      // source
      public:
      using source_container_type = std::vector< ::XMLSchema::string<char>>;
      using source_const_iterator = source_container_type::const_iterator;
      source_const_iterator begin_source () const;
      source_const_iterator end_source () const;
      size_t count_source () const;

      protected:
      source_container_type source_;

      // externalName
      public:
      ::XMLSchema::string<char> const& externalName () const;
      void externalName (::XMLSchema::string<char> const&);

      protected:
      using externalName_type = std::unique_ptr<::XMLSchema::string<char>>;
      externalName_type externalName_;

      // delegatesTo
      public:
      using delegatesTo_container_type = std::vector< ::DAnCE::Config_Handlers::PlanSubcomponentPropertyReference>;
      using delegatesTo_const_iterator = delegatesTo_container_type::const_iterator;
      delegatesTo_const_iterator begin_delegatesTo () const;
      delegatesTo_const_iterator end_delegatesTo () const;
      size_t count_delegatesTo () const;

      protected:
      delegatesTo_container_type delegatesTo_;

      public:
      PlanPropertyMapping (::XMLSchema::string<char> const& name__,
                           ::XMLSchema::string<char> const& externalName__,
                           delegatesTo_container_type const& delegatesTo__);

      explicit PlanPropertyMapping (::XSCRT::XML::Element<char> const&);
      PlanPropertyMapping (PlanPropertyMapping const& s);
      PlanPropertyMapping& operator= (PlanPropertyMapping const& s);

      PlanPropertyMapping (PlanPropertyMapping&&) = default;
      PlanPropertyMapping& operator= (PlanPropertyMapping&&) = default;
    };


    class XSC_XML_Handlers_Export deploymentPlan : public ::XSCRT::Type
    {
      using Base = ::XSCRT::Type;

      // label
      public:
      bool label_p () const;
      ::XMLSchema::string<char> const& label () const;
      void label (::XMLSchema::string<char> const& e);

      protected:
      using label_type = std::unique_ptr<::XMLSchema::string<char>>;
      label_type label_;

      // UUID
      public:
      bool UUID_p () const;
      ::XMLSchema::string<char> const& UUID () const;
      void UUID (::XMLSchema::string<char> const& e);

      protected:
      using UUID_type = std::unique_ptr<::XMLSchema::string<char>>;
      UUID_type UUID_;

      // realizes
      public:
      bool realizes_p () const;
      ::DAnCE::Config_Handlers::ComponentInterfaceDescription const& realizes () const;
      void realizes (::DAnCE::Config_Handlers::ComponentInterfaceDescription const& e);

      protected:
      using realizes_type = std::unique_ptr<::DAnCE::Config_Handlers::ComponentInterfaceDescription>;
      realizes_type realizes_;

      // implementation
      public:
      using implementation_container_type = std::vector< ::DAnCE::Config_Handlers::MonolithicDeploymentDescription>;
      using implementation_const_iterator = implementation_container_type::const_iterator;
      implementation_const_iterator begin_implementation () const;
      implementation_const_iterator end_implementation () const;
      size_t count_implementation () const;

      protected:
      implementation_container_type implementation_;

      // instance
      public:
      using instance_container_type = std::vector< ::DAnCE::Config_Handlers::InstanceDeploymentDescription>;
      using instance_const_iterator = instance_container_type::const_iterator;
      instance_const_iterator begin_instance () const;
      instance_const_iterator end_instance () const;
      size_t count_instance () const;

      protected:
      instance_container_type instance_;

      // connection
      public:
      using connection_container_type = std::vector< ::DAnCE::Config_Handlers::PlanConnectionDescription>;
      using connection_const_iterator = connection_container_type::const_iterator;
      connection_const_iterator begin_connection () const;
      connection_const_iterator end_connection () const;
      size_t count_connection () const;

      protected:
      connection_container_type connection_;

      // externalProperty
      public:
      using externalProperty_container_type = std::vector< ::DAnCE::Config_Handlers::PlanPropertyMapping>;
      using externalProperty_const_iterator = externalProperty_container_type::const_iterator;
      externalProperty_const_iterator begin_externalProperty () const;
      externalProperty_const_iterator end_externalProperty () const;
      size_t count_externalProperty () const;

      protected:
      externalProperty_container_type externalProperty_;

      // dependsOn
      public:
      using dependsOn_container_type = std::vector< ::DAnCE::Config_Handlers::ImplementationDependency>;
      using dependsOn_const_iterator = dependsOn_container_type::const_iterator;
      dependsOn_const_iterator begin_dependsOn () const;
      dependsOn_const_iterator end_dependsOn () const;
      size_t count_dependsOn () const;

      protected:
      dependsOn_container_type dependsOn_;

      // artifact
      public:
      using artifact_container_type = std::vector< ::DAnCE::Config_Handlers::ArtifactDeploymentDescription>;
      using artifact_const_iterator = artifact_container_type::const_iterator;
      artifact_const_iterator begin_artifact () const;
      artifact_const_iterator end_artifact () const;
      size_t count_artifact () const;

      protected:
      artifact_container_type artifact_;

      // infoProperty
      public:
      using infoProperty_container_type = std::vector< ::DAnCE::Config_Handlers::Property>;
      using infoProperty_const_iterator = infoProperty_container_type::const_iterator;
      infoProperty_const_iterator begin_infoProperty () const;
      infoProperty_const_iterator end_infoProperty () const;
      size_t count_infoProperty () const;

      protected:
      infoProperty_container_type infoProperty_;

      // localityConstraint
      public:
      using localityConstraint_container_type = std::vector< ::DAnCE::Config_Handlers::PlanLocality>;
      using localityConstraint_const_iterator = localityConstraint_container_type::const_iterator;
      localityConstraint_const_iterator begin_localityConstraint () const;
      localityConstraint_const_iterator end_localityConstraint () const;
      size_t count_localityConstraint () const;

      protected:
      localityConstraint_container_type localityConstraint_;

      public:
      deploymentPlan ();

      explicit deploymentPlan (::XSCRT::XML::Element<char> const&);
      deploymentPlan (deploymentPlan const& s);
      deploymentPlan& operator= (deploymentPlan const& s);

      deploymentPlan (deploymentPlan&&) = default;
      deploymentPlan& operator= (deploymentPlan&&) = default;
    };
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
  }
}

#endif // CDP_HPP

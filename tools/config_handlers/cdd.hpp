/*
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 */
#ifndef CDD_HPP
#define CDD_HPP

#include "xsc_xml_handlers_export.h"
// Forward declarations.
namespace DAnCE
{
  namespace Config_Handlers
  {
    class Domain;
    class Bridge;
    class Interconnect;
    class Node;
    class SharedResource;
  }
}

#include <memory>
#include <string>
#include <vector>
#include "ace/XML_Utils/XMLSchema/Types.hpp"
#include "ace/XML_Utils/XMLSchema/id_map.hpp"
#include "tao/x11/base/stddef.h"
#include "Basic_Deployment_Data.hpp"

namespace DAnCE
{
  namespace Config_Handlers
  {
    class XSC_XML_Handlers_Export Domain : public ::XSCRT::Type
    {
      using Base = ::XSCRT::Type;

      // UUID
      public:
      bool UUID_p () const;
      ::XMLSchema::string<char> const& UUID () const;
      void UUID (::XMLSchema::string<char> const& );

      protected:
      using UUID_type = std::unique_ptr<::XMLSchema::string<char>>;
      UUID_type UUID_;

      // label
      public:
      bool label_p () const;
      ::XMLSchema::string<char> const& label () const;
      void label (::XMLSchema::string<char> const& );

      protected:
      using label_type = std::unique_ptr<::XMLSchema::string<char>>;
      label_type label_;

      // node
      public:
      using node_container_type = std::vector< ::DAnCE::Config_Handlers::Node>;
      using node_const_iterator = node_container_type::const_iterator;
      node_const_iterator begin_node () const;
      node_const_iterator end_node () const;
      size_t count_node () const;

      protected:
      node_container_type node_;

      // interconnect
      public:
      using interconnect_container_type = std::vector< ::DAnCE::Config_Handlers::Interconnect>;
      using interconnect_const_iterator = interconnect_container_type::const_iterator;
      interconnect_const_iterator begin_interconnect () const;
      interconnect_const_iterator end_interconnect () const;
      size_t count_interconnect () const;

      protected:
      interconnect_container_type interconnect_;

      // bridge
      public:
      using bridge_container_type = std::vector< ::DAnCE::Config_Handlers::Bridge>;
      using bridge_const_iterator = bridge_container_type::const_iterator;
      bridge_const_iterator begin_bridge () const;
      bridge_const_iterator end_bridge () const;
      size_t count_bridge () const;

      protected:
      bridge_container_type bridge_;

      // sharedResource
      public:
      using sharedResource_container_type = std::vector< ::DAnCE::Config_Handlers::SharedResource>;
      using sharedResource_const_iterator = sharedResource_container_type::const_iterator;
      sharedResource_const_iterator begin_sharedResource () const;
      sharedResource_const_iterator end_sharedResource () const;
      size_t count_sharedResource () const;

      protected:
      sharedResource_container_type sharedResource_;

      // infoProperty
      public:
      using infoProperty_container_type = std::vector< ::DAnCE::Config_Handlers::Property>;
      using infoProperty_const_iterator = infoProperty_container_type::const_iterator;
      infoProperty_const_iterator begin_infoProperty () const;
      infoProperty_const_iterator end_infoProperty () const;
      size_t count_infoProperty () const;

      protected:
      infoProperty_container_type infoProperty_;

      public:
      Domain (node_container_type const& node__);

      explicit Domain (::XSCRT::XML::Element<char> const&);
      Domain (Domain const& s);
      Domain& operator= (Domain const& s);

      Domain (Domain&&) = default;
      Domain& operator= (Domain&&) = default;
    };


    class XSC_XML_Handlers_Export Bridge : public ::XSCRT::Type
    {
      using Base = ::XSCRT::Type;

      // name
      public:
      ::XMLSchema::string<char> const& name () const;
      void name (::XMLSchema::string<char> const& );

      protected:
      using name_type = std::unique_ptr<::XMLSchema::string<char>>;
      name_type name_;

      // label
      public:
      bool label_p () const;
      ::XMLSchema::string<char> const& label () const;
      void label (::XMLSchema::string<char> const& );

      protected:
      using label_type = std::unique_ptr<::XMLSchema::string<char>>;
      label_type label_;

      // connect
      public:
      using connect_container_type = std::vector< ::DAnCE::Config_Handlers::Interconnect>;
      using connect_const_iterator = connect_container_type::const_iterator;
      connect_const_iterator begin_connect () const;
      connect_const_iterator end_connect () const;
      size_t count_connect () const;

      protected:
      connect_container_type connect_;

      // resource
      public:
      using resource_container_type = std::vector< ::DAnCE::Config_Handlers::Resource>;
      using resource_const_iterator = resource_container_type::const_iterator;
      resource_const_iterator begin_resource () const;
      resource_const_iterator end_resource () const;
      size_t count_resource () const;

      protected:
      resource_container_type resource_;

      public:
      Bridge (::XMLSchema::string<char> const& name__,
              connect_container_type const& connect__);

      explicit Bridge (::XSCRT::XML::Element<char> const&);
      Bridge (Bridge const& s);
      Bridge& operator= (Bridge const& s);

      Bridge (Bridge&&) = default;
      Bridge& operator= (Bridge&&) = default;
    };


    class XSC_XML_Handlers_Export Interconnect : public ::XSCRT::Type
    {
      using Base = ::XSCRT::Type;

      // name
      public:
      ::XMLSchema::string<char> const& name () const;
      void name (::XMLSchema::string<char> const& );

      protected:
      using name_type = std::unique_ptr<::XMLSchema::string<char>>;
      name_type name_;

      // label
      public:
      bool label_p () const;
      ::XMLSchema::string<char> const& label () const;
      void label (::XMLSchema::string<char> const& );

      protected:
      using label_type = std::unique_ptr<::XMLSchema::string<char>>;
      label_type label_;

      // connection
      public:
      using connection_container_type = std::vector< ::DAnCE::Config_Handlers::Bridge>;
      using connection_const_iterator = connection_container_type::const_iterator;
      connection_const_iterator begin_connection () const;
      connection_const_iterator end_connection () const;
      size_t count_connection () const;

      protected:
      connection_container_type connection_;

      // connect
      public:
      using connect_container_type = std::vector< ::DAnCE::Config_Handlers::Node>;
      using connect_const_iterator = connect_container_type::const_iterator;
      connect_const_iterator begin_connect () const;
      connect_const_iterator end_connect () const;
      size_t count_connect () const;

      protected:
      connect_container_type connect_;

      // resource
      public:
      using resource_container_type = std::vector< ::DAnCE::Config_Handlers::Resource>;
      using resource_const_iterator = resource_container_type::const_iterator;
      resource_const_iterator begin_resource () const;
      resource_const_iterator end_resource () const;
      size_t count_resource () const;

      protected:
      resource_container_type resource_;

      public:
      Interconnect (::XMLSchema::string<char> const& name__,
                    connect_container_type const& connect__);

      explicit Interconnect (::XSCRT::XML::Element<char> const&);
      Interconnect (Interconnect const& s);
      Interconnect& operator= (Interconnect const& s);

      Interconnect (Interconnect&&) = default;
      Interconnect& operator= (Interconnect&&) = default;
    };


    class XSC_XML_Handlers_Export Node : public ::XSCRT::Type
    {
      using Base = ::XSCRT::Type;

      // name
      public:
      ::XMLSchema::string<char> const& name () const;
      void name (::XMLSchema::string<char> const& );

      protected:
      using name_type = std::unique_ptr<::XMLSchema::string<char>>;
      name_type name_;

      // label
      public:
      bool label_p () const;
      ::XMLSchema::string<char> const& label () const;
      void label (::XMLSchema::string<char> const& );

      protected:
      using label_type = std::unique_ptr<::XMLSchema::string<char>>;
      label_type label_;

      // connection
      public:
      using connection_container_type = std::vector< ::DAnCE::Config_Handlers::Interconnect>;
      using connection_const_iterator = connection_container_type::const_iterator;
      connection_const_iterator begin_connection () const;
      connection_const_iterator end_connection () const;
      size_t count_connection () const;

      protected:
      connection_container_type connection_;

      // sharedResource
      public:
      using sharedResource_container_type = std::vector< ::DAnCE::Config_Handlers::SharedResource>;
      using sharedResource_const_iterator = sharedResource_container_type::const_iterator;
      sharedResource_const_iterator begin_sharedResource () const;
      sharedResource_const_iterator end_sharedResource () const;
      size_t count_sharedResource () const;

      protected:
      sharedResource_container_type sharedResource_;

      // resource
      public:
      using resource_container_type = std::vector< ::DAnCE::Config_Handlers::Resource>;
      using resource_const_iterator = resource_container_type::const_iterator;
      resource_const_iterator begin_resource () const;
      resource_const_iterator end_resource () const;
      size_t count_resource () const;

      protected:
      resource_container_type resource_;

      public:
      Node (::XMLSchema::string<char> const& name__);

      explicit Node (::XSCRT::XML::Element<char> const&);
      Node (Node const& s);
      Node& operator= (Node const& s);

      Node (Node&&) = default;
      Node& operator= (Node&&) = default;
    };


    class XSC_XML_Handlers_Export SharedResource : public ::XSCRT::Type
    {
      using Base = ::XSCRT::Type;

      // name
      public:
      ::XMLSchema::string<char> const& name () const;
      void name (::XMLSchema::string<char> const& );

      protected:
      using name_type = std::unique_ptr<::XMLSchema::string<char>>;
      name_type name_;

      // resourceType
      public:
      ::XMLSchema::string<char> const& resourceType () const;
      void resourceType (::XMLSchema::string<char> const& );

      protected:
      using resourceType_type = std::unique_ptr<::XMLSchema::string<char>>;
      resourceType_type resourceType_;

      // node
      public:
      ::DAnCE::Config_Handlers::Node const& node () const;
      void node (::DAnCE::Config_Handlers::Node const& );

      protected:
      using node_type = std::unique_ptr<::DAnCE::Config_Handlers::Node>;
      node_type node_;

      // property
      public:
      ::DAnCE::Config_Handlers::SatisfierProperty const& property () const;
      void property (::DAnCE::Config_Handlers::SatisfierProperty const& );

      protected:
      using property_type = std::unique_ptr<::DAnCE::Config_Handlers::SatisfierProperty>;
      property_type property_;

      public:
      SharedResource (::XMLSchema::string<char> const& name__,
                      ::XMLSchema::string<char> const& resourceType__,
                      ::DAnCE::Config_Handlers::Node const& node__,
                      ::DAnCE::Config_Handlers::SatisfierProperty const& property__);

      explicit SharedResource (::XSCRT::XML::Element<char> const&);
      SharedResource (SharedResource const& s);
      SharedResource& operator= (SharedResource const& s);

      SharedResource (SharedResource&&) = default;
      SharedResource& operator= (SharedResource&&) = default;
    };
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
  }
}

#endif // CDD_HPP

/*
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 */
#ifndef CID_HPP
#define CID_HPP

#include "xsc_xml_handlers_export.h"
// Forward declarations.
namespace DAnCE
{
  namespace Config_Handlers
  {
    class ComponentPackageReference;
    class SubcomponentInstantiationDescription;
    class SubcomponentPropertyReference;
    class AssemblyPropertyMapping;
    class LocalityKind;
    class Locality;
    class ComponentAssemblyDescription;
    class MonolithicImplementationDescription;
    class ComponentImplementationDescription;
    class ConnectorImplementationDescription;
  }
}

#include <memory>
#include <string>
#include <vector>
#include "ace/XML_Utils/XMLSchema/Types.hpp"
#include "ace/XML_Utils/XMLSchema/id_map.hpp"
#include "tao/x11/base/stddef.h"
#include "Basic_Deployment_Data.hpp"

#include "ccd.hpp"

#include "iad.hpp"

#include "pcd.hpp"

namespace DAnCE
{
  namespace Config_Handlers
  {
    class XSC_XML_Handlers_Export ComponentPackageReference : public ::XSCRT::Type
    {
      using Base = ::XSCRT::Type;

      // requiredUUID
      public:
      bool requiredUUID_p () const;
      ::XMLSchema::string<char> const& requiredUUID () const;
      void requiredUUID (::XMLSchema::string<char> const& e);

      protected:
      using requiredUUID_type = std::unique_ptr<::XMLSchema::string<char>>;
      requiredUUID_type requiredUUID_;

      // requiredName
      public:
      bool requiredName_p () const;
      ::XMLSchema::string<char> const& requiredName () const;
      void requiredName (::XMLSchema::string<char> const& e);

      protected:
      using requiredName_type = std::unique_ptr<::XMLSchema::string<char>>;
      requiredName_type requiredName_;

      // requiredType
      public:
      ::DAnCE::Config_Handlers::ComponentInterfaceDescription const& requiredType () const;
      void requiredType (::DAnCE::Config_Handlers::ComponentInterfaceDescription const&);

      protected:
      using requiredType_type = std::unique_ptr<::DAnCE::Config_Handlers::ComponentInterfaceDescription>;
      requiredType_type requiredType_;

      public:
      ComponentPackageReference (::DAnCE::Config_Handlers::ComponentInterfaceDescription const& requiredType__);

      explicit ComponentPackageReference (::XSCRT::XML::Element<char> const&);
      ComponentPackageReference (ComponentPackageReference const& s);
      ComponentPackageReference& operator= (ComponentPackageReference const& s);

      ComponentPackageReference (ComponentPackageReference&&) = default;
      ComponentPackageReference& operator= (ComponentPackageReference&&) = default;
    };


    class XSC_XML_Handlers_Export SubcomponentInstantiationDescription : public ::XSCRT::Type
    {
      using Base = ::XSCRT::Type;

      // name
      public:
      ::XMLSchema::string<char> const& name () const;
      void name (::XMLSchema::string<char> const&);

      protected:
      using name_type = std::unique_ptr<::XMLSchema::string<char>>;
      name_type name_;

      // basePackage
      public:
      bool basePackage_p () const;
      ::DAnCE::Config_Handlers::ComponentPackageDescription const& basePackage () const;
      void basePackage (::DAnCE::Config_Handlers::ComponentPackageDescription const& e);

      protected:
      using basePackage_type = std::unique_ptr<::DAnCE::Config_Handlers::ComponentPackageDescription>;
      basePackage_type basePackage_;

      // specializedConfig
      public:
      bool specializedConfig_p () const;
      ::DAnCE::Config_Handlers::PackageConfiguration const& specializedConfig () const;
      void specializedConfig (::DAnCE::Config_Handlers::PackageConfiguration const& e);

      protected:
      using specializedConfig_type = std::unique_ptr<::DAnCE::Config_Handlers::PackageConfiguration>;
      specializedConfig_type specializedConfig_;

      // selectRequirement
      public:
      using selectRequirement_container_type = std::vector< ::DAnCE::Config_Handlers::Requirement>;
      using selectRequirement_const_iterator = selectRequirement_container_type::const_iterator;
      selectRequirement_const_iterator begin_selectRequirement () const;
      selectRequirement_const_iterator end_selectRequirement () const;
      size_t count_selectRequirement () const;

      protected:
      selectRequirement_container_type selectRequirement_;

      // configProperty
      public:
      using configProperty_container_type = std::vector< ::DAnCE::Config_Handlers::Property>;
      using configProperty_const_iterator = configProperty_container_type::const_iterator;
      configProperty_const_iterator begin_configProperty () const;
      configProperty_const_iterator end_configProperty () const;
      size_t count_configProperty () const;

      protected:
      configProperty_container_type configProperty_;

      // referencedPackage
      public:
      bool referencedPackage_p () const;
      ::DAnCE::Config_Handlers::ComponentPackageReference const& referencedPackage () const;
      void referencedPackage (::DAnCE::Config_Handlers::ComponentPackageReference const& e);

      protected:
      using referencedPackage_type = std::unique_ptr<::DAnCE::Config_Handlers::ComponentPackageReference>;
      referencedPackage_type referencedPackage_;

      // importedPackage
      public:
      bool importedPackage_p () const;
      ::DAnCE::Config_Handlers::ComponentPackageImport const& importedPackage () const;
      void importedPackage (::DAnCE::Config_Handlers::ComponentPackageImport const& e);

      protected:
      using importedPackage_type = std::unique_ptr<::DAnCE::Config_Handlers::ComponentPackageImport>;
      importedPackage_type importedPackage_;

      // id
      public:
      bool id_p () const;
      ::XMLSchema::ID<char> const& id () const;
      ::XMLSchema::ID<char>& id ();
      void id (::XMLSchema::ID<char> const&);

      protected:
      using id_type = std::unique_ptr<::XMLSchema::ID<char>>;
      id_type id_;

      public:
      SubcomponentInstantiationDescription (::XMLSchema::string<char> const& name__);

      explicit SubcomponentInstantiationDescription (::XSCRT::XML::Element<char> const&);
      SubcomponentInstantiationDescription (SubcomponentInstantiationDescription const& s);
      SubcomponentInstantiationDescription& operator= (SubcomponentInstantiationDescription const& s);

      SubcomponentInstantiationDescription (SubcomponentInstantiationDescription&&) = default;
      SubcomponentInstantiationDescription& operator= (SubcomponentInstantiationDescription&&) = default;
    };


    class XSC_XML_Handlers_Export SubcomponentPropertyReference : public ::XSCRT::Type
    {
      using Base = ::XSCRT::Type;

      // propertyName
      public:
      ::XMLSchema::string<char> const& propertyName () const;
      void propertyName (::XMLSchema::string<char> const&);

      protected:
      using propertyName_type = std::unique_ptr<::XMLSchema::string<char>>;
      propertyName_type propertyName_;

      // instance
      public:
      ::DAnCE::Config_Handlers::IdRef const& instance () const;
      void instance (::DAnCE::Config_Handlers::IdRef const&);

      protected:
      using instance_type = std::unique_ptr<::DAnCE::Config_Handlers::IdRef>;
      instance_type instance_;

      public:
      SubcomponentPropertyReference (::XMLSchema::string<char> const& propertyName__,
                                     ::DAnCE::Config_Handlers::IdRef const& instance__);

      explicit SubcomponentPropertyReference (::XSCRT::XML::Element<char> const&);
      SubcomponentPropertyReference (SubcomponentPropertyReference const& s);
      SubcomponentPropertyReference& operator= (SubcomponentPropertyReference const& s);

      SubcomponentPropertyReference (SubcomponentPropertyReference&&) = default;
      SubcomponentPropertyReference& operator= (SubcomponentPropertyReference&&) = default;
    };


    class XSC_XML_Handlers_Export AssemblyPropertyMapping : public ::XSCRT::Type
    {
      using Base = ::XSCRT::Type;

      // name
      public:
      ::XMLSchema::string<char> const& name () const;
      void name (::XMLSchema::string<char> const&);

      protected:
      using name_type = std::unique_ptr<::XMLSchema::string<char>>;
      name_type name_;

      // externalName
      public:
      ::XMLSchema::string<char> const& externalName () const;
      void externalName (::XMLSchema::string<char> const&);

      protected:
      using externalName_type = std::unique_ptr<::XMLSchema::string<char>>;
      externalName_type externalName_;

      // delegatesTo
      public:
      using delegatesTo_container_type = std::vector< ::DAnCE::Config_Handlers::SubcomponentPropertyReference>;
      using delegatesTo_const_iterator = delegatesTo_container_type::const_iterator;
      delegatesTo_const_iterator begin_delegatesTo () const;
      delegatesTo_const_iterator end_delegatesTo () const;
      size_t count_delegatesTo () const;

      protected:
      delegatesTo_container_type delegatesTo_;

      public:
      AssemblyPropertyMapping (::XMLSchema::string<char> const& name__,
                               ::XMLSchema::string<char> const& externalName__);

      explicit AssemblyPropertyMapping (::XSCRT::XML::Element<char> const&);
      AssemblyPropertyMapping (AssemblyPropertyMapping const& s);
      AssemblyPropertyMapping& operator= (AssemblyPropertyMapping const& s);

      AssemblyPropertyMapping (AssemblyPropertyMapping&&) = default;
      AssemblyPropertyMapping& operator= (AssemblyPropertyMapping&&) = default;
    };


    class XSC_XML_Handlers_Export LocalityKind : public ::XSCRT::Type
    {
      public:
      explicit LocalityKind (::XSCRT::XML::Element<char> const&);
      explicit LocalityKind (::XSCRT::XML::Attribute<char> const&);

      static LocalityKind const SameNodeAnyProcess;
      static LocalityKind const SameNodeSameProcess;
      static LocalityKind const SameNodeDifferentProcess;
      static LocalityKind const DifferentNode;
      static LocalityKind const DifferentProcess;
      static LocalityKind const NoConstraint;

      enum Value
      {
        SameNodeAnyProcess_l, SameNodeSameProcess_l, SameNodeDifferentProcess_l, DifferentNode_l, DifferentProcess_l, NoConstraint_l
      };


      Value
      integral () const;

      friend bool XSC_XML_Handlers_Export
      operator== (LocalityKind const& a, LocalityKind const& b);

      friend bool XSC_XML_Handlers_Export
      operator!= (LocalityKind const& a, LocalityKind const& b);

      private:
      LocalityKind (Value v);

      Value v_;
    };

    bool XSC_XML_Handlers_Export operator== (LocalityKind const &a, LocalityKind const &b);

    bool XSC_XML_Handlers_Export operator!= (LocalityKind const &a, LocalityKind const &b);


    class XSC_XML_Handlers_Export Locality : public ::XSCRT::Type
    {
      using Base = ::XSCRT::Type;

      // constraint
      public:
      ::DAnCE::Config_Handlers::LocalityKind const& constraint () const;
      void constraint (::DAnCE::Config_Handlers::LocalityKind const&);

      protected:
      using constraint_type = std::unique_ptr<::DAnCE::Config_Handlers::LocalityKind>;
      constraint_type constraint_;

      // constrainedInstance
      public:
      ::DAnCE::Config_Handlers::IdRef const& constrainedInstance () const;
      void constrainedInstance (::DAnCE::Config_Handlers::IdRef const&);

      protected:
      using constrainedInstance_type = std::unique_ptr<::DAnCE::Config_Handlers::IdRef>;
      constrainedInstance_type constrainedInstance_;

      public:
      Locality (::DAnCE::Config_Handlers::LocalityKind const& constraint__,
                ::DAnCE::Config_Handlers::IdRef const& constrainedInstance__);

      explicit Locality (::XSCRT::XML::Element<char> const&);
      Locality (Locality const& s);
      Locality& operator= (Locality const& s);

      Locality (Locality&&) = default;
      Locality& operator= (Locality&&) = default;
    };


    class XSC_XML_Handlers_Export ComponentAssemblyDescription : public ::XSCRT::Type
    {
      using Base = ::XSCRT::Type;

      // instance
      public:
      using instance_container_type = std::vector< ::DAnCE::Config_Handlers::SubcomponentInstantiationDescription>;
      using instance_const_iterator = instance_container_type::const_iterator;
      instance_const_iterator begin_instance () const;
      instance_const_iterator end_instance () const;
      size_t count_instance () const;

      protected:
      instance_container_type instance_;

      // connection
      public:
      using connection_container_type = std::vector< ::DAnCE::Config_Handlers::AssemblyConnectionDescription>;
      using connection_const_iterator = connection_container_type::const_iterator;
      connection_const_iterator begin_connection () const;
      connection_const_iterator end_connection () const;
      size_t count_connection () const;

      protected:
      connection_container_type connection_;

      // externalProperty
      public:
      using externalProperty_container_type = std::vector< ::DAnCE::Config_Handlers::AssemblyPropertyMapping>;
      using externalProperty_const_iterator = externalProperty_container_type::const_iterator;
      externalProperty_const_iterator begin_externalProperty () const;
      externalProperty_const_iterator end_externalProperty () const;
      size_t count_externalProperty () const;

      protected:
      externalProperty_container_type externalProperty_;

      // locality
      public:
      using locality_container_type = std::vector< ::DAnCE::Config_Handlers::Locality>;
      using locality_const_iterator = locality_container_type::const_iterator;
      locality_const_iterator begin_locality () const;
      locality_const_iterator end_locality () const;
      size_t count_locality () const;

      protected:
      locality_container_type locality_;

      public:
      ComponentAssemblyDescription ();

      explicit ComponentAssemblyDescription (::XSCRT::XML::Element<char> const&);
      ComponentAssemblyDescription (ComponentAssemblyDescription const& s);
      ComponentAssemblyDescription& operator= (ComponentAssemblyDescription const& s);

      ComponentAssemblyDescription (ComponentAssemblyDescription&&) = default;
      ComponentAssemblyDescription& operator= (ComponentAssemblyDescription&&) = default;
    };


    class XSC_XML_Handlers_Export MonolithicImplementationDescription : public ::XSCRT::Type
    {
      using Base = ::XSCRT::Type;

      // nodeExecParameter
      public:
      using nodeExecParameter_container_type = std::vector< ::DAnCE::Config_Handlers::Property>;
      using nodeExecParameter_const_iterator = nodeExecParameter_container_type::const_iterator;
      nodeExecParameter_const_iterator begin_nodeExecParameter () const;
      nodeExecParameter_const_iterator end_nodeExecParameter () const;
      size_t count_nodeExecParameter () const;

      protected:
      nodeExecParameter_container_type nodeExecParameter_;

      // componentExecParameter
      public:
      using componentExecParameter_container_type = std::vector< ::DAnCE::Config_Handlers::Property>;
      using componentExecParameter_const_iterator = componentExecParameter_container_type::const_iterator;
      componentExecParameter_const_iterator begin_componentExecParameter () const;
      componentExecParameter_const_iterator end_componentExecParameter () const;
      size_t count_componentExecParameter () const;

      protected:
      componentExecParameter_container_type componentExecParameter_;

      // deployRequirement
      public:
      using deployRequirement_container_type = std::vector< ::DAnCE::Config_Handlers::ImplementationRequirement>;
      using deployRequirement_const_iterator = deployRequirement_container_type::const_iterator;
      deployRequirement_const_iterator begin_deployRequirement () const;
      deployRequirement_const_iterator end_deployRequirement () const;
      size_t count_deployRequirement () const;

      protected:
      deployRequirement_container_type deployRequirement_;

      // primaryArtifact
      public:
      using primaryArtifact_container_type = std::vector< ::DAnCE::Config_Handlers::NamedImplementationArtifact>;
      using primaryArtifact_const_iterator = primaryArtifact_container_type::const_iterator;
      primaryArtifact_const_iterator begin_primaryArtifact () const;
      primaryArtifact_const_iterator end_primaryArtifact () const;
      size_t count_primaryArtifact () const;

      protected:
      primaryArtifact_container_type primaryArtifact_;

      public:
      MonolithicImplementationDescription ();

      explicit MonolithicImplementationDescription (::XSCRT::XML::Element<char> const&);
      MonolithicImplementationDescription (MonolithicImplementationDescription const& s);
      MonolithicImplementationDescription& operator= (MonolithicImplementationDescription const& s);

      MonolithicImplementationDescription (MonolithicImplementationDescription&&) = default;
      MonolithicImplementationDescription& operator= (MonolithicImplementationDescription&&) = default;
    };


    class XSC_XML_Handlers_Export ComponentImplementationDescription : public ::XSCRT::Type
    {
      using Base = ::XSCRT::Type;

      // label
      public:
      bool label_p () const;
      ::XMLSchema::string<char> const& label () const;
      void label (::XMLSchema::string<char> const& e);

      protected:
      using label_type = std::unique_ptr<::XMLSchema::string<char>>;
      label_type label_;

      // UUID
      public:
      bool UUID_p () const;
      ::XMLSchema::string<char> const& UUID () const;
      void UUID (::XMLSchema::string<char> const& e);

      protected:
      using UUID_type = std::unique_ptr<::XMLSchema::string<char>>;
      UUID_type UUID_;

      // implements
      public:
      bool implements_p () const;
      ::DAnCE::Config_Handlers::ComponentInterfaceDescription const& implements () const;
      void implements (::DAnCE::Config_Handlers::ComponentInterfaceDescription const& e);

      protected:
      using implements_type = std::unique_ptr<::DAnCE::Config_Handlers::ComponentInterfaceDescription>;
      implements_type implements_;

      // assemblyImpl
      public:
      bool assemblyImpl_p () const;
      ::DAnCE::Config_Handlers::ComponentAssemblyDescription const& assemblyImpl () const;
      void assemblyImpl (::DAnCE::Config_Handlers::ComponentAssemblyDescription const& e);

      protected:
      using assemblyImpl_type = std::unique_ptr<::DAnCE::Config_Handlers::ComponentAssemblyDescription>;
      assemblyImpl_type assemblyImpl_;

      // monolithicImpl
      public:
      bool monolithicImpl_p () const;
      ::DAnCE::Config_Handlers::MonolithicImplementationDescription const& monolithicImpl () const;
      void monolithicImpl (::DAnCE::Config_Handlers::MonolithicImplementationDescription const& e);

      protected:
      using monolithicImpl_type = std::unique_ptr<::DAnCE::Config_Handlers::MonolithicImplementationDescription>;
      monolithicImpl_type monolithicImpl_;

      // configProperty
      public:
      using configProperty_container_type = std::vector< ::DAnCE::Config_Handlers::Property>;
      using configProperty_const_iterator = configProperty_container_type::const_iterator;
      configProperty_const_iterator begin_configProperty () const;
      configProperty_const_iterator end_configProperty () const;
      size_t count_configProperty () const;

      protected:
      configProperty_container_type configProperty_;

      // capability
      public:
      using capability_container_type = std::vector< ::DAnCE::Config_Handlers::Capability>;
      using capability_const_iterator = capability_container_type::const_iterator;
      capability_const_iterator begin_capability () const;
      capability_const_iterator end_capability () const;
      size_t count_capability () const;

      protected:
      capability_container_type capability_;

      // dependsOn
      public:
      using dependsOn_container_type = std::vector< ::DAnCE::Config_Handlers::ImplementationDependency>;
      using dependsOn_const_iterator = dependsOn_container_type::const_iterator;
      dependsOn_const_iterator begin_dependsOn () const;
      dependsOn_const_iterator end_dependsOn () const;
      size_t count_dependsOn () const;

      protected:
      dependsOn_container_type dependsOn_;

      // infoProperty
      public:
      using infoProperty_container_type = std::vector< ::DAnCE::Config_Handlers::Property>;
      using infoProperty_const_iterator = infoProperty_container_type::const_iterator;
      infoProperty_const_iterator begin_infoProperty () const;
      infoProperty_const_iterator end_infoProperty () const;
      size_t count_infoProperty () const;

      protected:
      infoProperty_container_type infoProperty_;

      // href
      public:
      bool href_p () const;
      ::XMLSchema::string<char> const& href () const;
      ::XMLSchema::string<char>& href ();
      void href (::XMLSchema::string<char> const&);

      protected:
      using href_type = std::unique_ptr<::XMLSchema::string<char>>;
      href_type href_;

      public:
      ComponentImplementationDescription ();

      explicit ComponentImplementationDescription (::XSCRT::XML::Element<char> const&);
      ComponentImplementationDescription (ComponentImplementationDescription const& s);
      ComponentImplementationDescription& operator= (ComponentImplementationDescription const& s);

      ComponentImplementationDescription (ComponentImplementationDescription&&) = default;
      ComponentImplementationDescription& operator= (ComponentImplementationDescription&&) = default;
    };


    class XSC_XML_Handlers_Export ConnectorImplementationDescription : public ::XSCRT::Type
    {
      using Base = ::XSCRT::Type;

      // label
      public:
      bool label_p () const;
      ::XMLSchema::string<char> const& label () const;
      void label (::XMLSchema::string<char> const& e);

      protected:
      using label_type = std::unique_ptr<::XMLSchema::string<char>>;
      label_type label_;

      // UUID
      public:
      bool UUID_p () const;
      ::XMLSchema::string<char> const& UUID () const;
      void UUID (::XMLSchema::string<char> const& e);

      protected:
      using UUID_type = std::unique_ptr<::XMLSchema::string<char>>;
      UUID_type UUID_;

      // implements
      public:
      bool implements_p () const;
      ::DAnCE::Config_Handlers::ComponentInterfaceDescription const& implements () const;
      void implements (::DAnCE::Config_Handlers::ComponentInterfaceDescription const& e);

      protected:
      using implements_type = std::unique_ptr<::DAnCE::Config_Handlers::ComponentInterfaceDescription>;
      implements_type implements_;

      // assemblyImpl
      public:
      bool assemblyImpl_p () const;
      ::DAnCE::Config_Handlers::ComponentAssemblyDescription const& assemblyImpl () const;
      void assemblyImpl (::DAnCE::Config_Handlers::ComponentAssemblyDescription const& e);

      protected:
      using assemblyImpl_type = std::unique_ptr<::DAnCE::Config_Handlers::ComponentAssemblyDescription>;
      assemblyImpl_type assemblyImpl_;

      // monolithicImpl
      public:
      bool monolithicImpl_p () const;
      ::DAnCE::Config_Handlers::MonolithicImplementationDescription const& monolithicImpl () const;
      void monolithicImpl (::DAnCE::Config_Handlers::MonolithicImplementationDescription const& e);

      protected:
      using monolithicImpl_type = std::unique_ptr<::DAnCE::Config_Handlers::MonolithicImplementationDescription>;
      monolithicImpl_type monolithicImpl_;

      // configProperty
      public:
      using configProperty_container_type = std::vector< ::DAnCE::Config_Handlers::Property>;
      using configProperty_const_iterator = configProperty_container_type::const_iterator;
      configProperty_const_iterator begin_configProperty () const;
      configProperty_const_iterator end_configProperty () const;
      size_t count_configProperty () const;

      protected:
      configProperty_container_type configProperty_;

      // capability
      public:
      using capability_container_type = std::vector< ::DAnCE::Config_Handlers::Capability>;
      using capability_const_iterator = capability_container_type::const_iterator;
      capability_const_iterator begin_capability () const;
      capability_const_iterator end_capability () const;
      size_t count_capability () const;

      protected:
      capability_container_type capability_;

      // dependsOn
      public:
      using dependsOn_container_type = std::vector< ::DAnCE::Config_Handlers::ImplementationDependency>;
      using dependsOn_const_iterator = dependsOn_container_type::const_iterator;
      dependsOn_const_iterator begin_dependsOn () const;
      dependsOn_const_iterator end_dependsOn () const;
      size_t count_dependsOn () const;

      protected:
      dependsOn_container_type dependsOn_;

      // infoProperty
      public:
      using infoProperty_container_type = std::vector< ::DAnCE::Config_Handlers::Property>;
      using infoProperty_const_iterator = infoProperty_container_type::const_iterator;
      infoProperty_const_iterator begin_infoProperty () const;
      infoProperty_const_iterator end_infoProperty () const;
      size_t count_infoProperty () const;

      protected:
      infoProperty_container_type infoProperty_;

      // href
      public:
      bool href_p () const;
      ::XMLSchema::string<char> const& href () const;
      ::XMLSchema::string<char>& href ();
      void href (::XMLSchema::string<char> const&);

      protected:
      using href_type = std::unique_ptr<::XMLSchema::string<char>>;
      href_type href_;

      public:
      ConnectorImplementationDescription ();

      explicit ConnectorImplementationDescription (::XSCRT::XML::Element<char> const&);
      ConnectorImplementationDescription (ConnectorImplementationDescription const& s);
      ConnectorImplementationDescription& operator= (ConnectorImplementationDescription const& s);

      ConnectorImplementationDescription (ConnectorImplementationDescription&&) = default;
      ConnectorImplementationDescription& operator= (ConnectorImplementationDescription&&) = default;
    };
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
  }
}

#endif // CID_HPP

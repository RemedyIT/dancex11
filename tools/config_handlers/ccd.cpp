/*
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 */
#include "ccd.hpp"

namespace DAnCE
{
  namespace Config_Handlers
  {
    // ComponentInterfaceDescription

    ComponentInterfaceDescription::ComponentInterfaceDescription ()
    : ::XSCRT::Type ()
    {
    }

    ComponentInterfaceDescription::ComponentInterfaceDescription (ComponentInterfaceDescription const& s) :
    ::XSCRT::Type (s)
    , label_ (s.label_ ? std::make_unique< ::XMLSchema::string<char>> (*s.label_) : nullptr)
    , UUID_ (s.UUID_ ? std::make_unique< ::XMLSchema::string<char>> (*s.UUID_) : nullptr)
    , specificType_ (s.specificType_ ? std::make_unique< ::XMLSchema::string<char>> (*s.specificType_) : nullptr)
    , supportedType_ (s.supportedType_)
    , idlFile_ (s.idlFile_)
    , configProperty_ (s.configProperty_)
    , port_ (s.port_)
    , property_ (s.property_)
    , infoProperty_ (s.infoProperty_)
    , contentLocation_ (s.contentLocation_ ? std::make_unique< ::XMLSchema::string<char>> (*s.contentLocation_) : nullptr)
    , href_ (s.href_ ? std::make_unique< ::XMLSchema::string<char>> (*s.href_) : nullptr)
    {
    }

    ComponentInterfaceDescription&
    ComponentInterfaceDescription::operator= (ComponentInterfaceDescription const& s)
    {
      if (std::addressof(s) != this)
      {
        if (s.label_)
          label (*(s.label_));
        else
          label_.reset (nullptr);

        if (s.UUID_)
          UUID (*(s.UUID_));
        else
          UUID_.reset (nullptr);

        if (s.specificType_)
          specificType (*(s.specificType_));
        else
          specificType_.reset (nullptr);

        supportedType_ = s.supportedType_;

        idlFile_ = s.idlFile_;

        configProperty_ = s.configProperty_;

        port_ = s.port_;

        property_ = s.property_;

        infoProperty_ = s.infoProperty_;

        if (s.contentLocation_)
          contentLocation (*(s.contentLocation_));
        else
          contentLocation_.reset (nullptr);

        if (s.href_) href (*(s.href_));
        else href_.reset (nullptr);
      }

      return *this;
    }


    // ComponentInterfaceDescription
    bool ComponentInterfaceDescription::
    label_p () const
    {
      return !!label_;
    }

    ::XMLSchema::string<char> const& ComponentInterfaceDescription::
    label () const
    {
      return *label_;
    }

    void ComponentInterfaceDescription::
    label (::XMLSchema::string<char> const& e)
    {
      if (label_)
      {
        *label_ = e;
      }

      else
      {
        label_ = std::make_unique< ::XMLSchema::string<char>> (e);
      }
    }

    // ComponentInterfaceDescription
    bool ComponentInterfaceDescription::
    UUID_p () const
    {
      return !!UUID_;
    }

    ::XMLSchema::string<char> const& ComponentInterfaceDescription::
    UUID () const
    {
      return *UUID_;
    }

    void ComponentInterfaceDescription::
    UUID (::XMLSchema::string<char> const& e)
    {
      if (UUID_)
      {
        *UUID_ = e;
      }

      else
      {
        UUID_ = std::make_unique< ::XMLSchema::string<char>> (e);
      }
    }

    // ComponentInterfaceDescription
    bool ComponentInterfaceDescription::
    specificType_p () const
    {
      return !!specificType_;
    }

    ::XMLSchema::string<char> const& ComponentInterfaceDescription::
    specificType () const
    {
      return *specificType_;
    }

    void ComponentInterfaceDescription::
    specificType (::XMLSchema::string<char> const& e)
    {
      if (specificType_)
      {
        *specificType_ = e;
      }

      else
      {
        specificType_ = std::make_unique< ::XMLSchema::string<char>> (e);
      }
    }

    // ComponentInterfaceDescription
    ComponentInterfaceDescription::supportedType_const_iterator ComponentInterfaceDescription::
    begin_supportedType () const
    {
      return supportedType_.cbegin ();
    }

    ComponentInterfaceDescription::supportedType_const_iterator ComponentInterfaceDescription::
    end_supportedType () const
    {
      return supportedType_.cend ();
    }

    size_t ComponentInterfaceDescription::
    count_supportedType(void) const
    {
      return supportedType_.size ();
    }

    // ComponentInterfaceDescription
    ComponentInterfaceDescription::idlFile_const_iterator ComponentInterfaceDescription::
    begin_idlFile () const
    {
      return idlFile_.cbegin ();
    }

    ComponentInterfaceDescription::idlFile_const_iterator ComponentInterfaceDescription::
    end_idlFile () const
    {
      return idlFile_.cend ();
    }

    size_t ComponentInterfaceDescription::
    count_idlFile(void) const
    {
      return idlFile_.size ();
    }

    // ComponentInterfaceDescription
    ComponentInterfaceDescription::configProperty_const_iterator ComponentInterfaceDescription::
    begin_configProperty () const
    {
      return configProperty_.cbegin ();
    }

    ComponentInterfaceDescription::configProperty_const_iterator ComponentInterfaceDescription::
    end_configProperty () const
    {
      return configProperty_.cend ();
    }

    size_t ComponentInterfaceDescription::
    count_configProperty(void) const
    {
      return configProperty_.size ();
    }

    // ComponentInterfaceDescription
    ComponentInterfaceDescription::port_const_iterator ComponentInterfaceDescription::
    begin_port () const
    {
      return port_.cbegin ();
    }

    ComponentInterfaceDescription::port_const_iterator ComponentInterfaceDescription::
    end_port () const
    {
      return port_.cend ();
    }

    size_t ComponentInterfaceDescription::
    count_port(void) const
    {
      return port_.size ();
    }

    // ComponentInterfaceDescription
    ComponentInterfaceDescription::property_const_iterator ComponentInterfaceDescription::
    begin_property () const
    {
      return property_.cbegin ();
    }

    ComponentInterfaceDescription::property_const_iterator ComponentInterfaceDescription::
    end_property () const
    {
      return property_.cend ();
    }

    size_t ComponentInterfaceDescription::
    count_property(void) const
    {
      return property_.size ();
    }

    // ComponentInterfaceDescription
    ComponentInterfaceDescription::infoProperty_const_iterator ComponentInterfaceDescription::
    begin_infoProperty () const
    {
      return infoProperty_.cbegin ();
    }

    ComponentInterfaceDescription::infoProperty_const_iterator ComponentInterfaceDescription::
    end_infoProperty () const
    {
      return infoProperty_.cend ();
    }

    size_t ComponentInterfaceDescription::
    count_infoProperty(void) const
    {
      return infoProperty_.size ();
    }

    // ComponentInterfaceDescription
    bool ComponentInterfaceDescription::
    contentLocation_p () const
    {
      return !!contentLocation_;
    }

    ::XMLSchema::string<char> const& ComponentInterfaceDescription::
    contentLocation () const
    {
      return *contentLocation_;
    }

    void ComponentInterfaceDescription::
    contentLocation (::XMLSchema::string<char> const& e)
    {
      if (contentLocation_)
      {
        *contentLocation_ = e;
      }

      else
      {
        contentLocation_ = std::make_unique< ::XMLSchema::string<char>> (e);
      }
    }

    // ComponentInterfaceDescription
    bool ComponentInterfaceDescription::
    href_p () const
    {
      return !!href_;
    }

    ::XMLSchema::string<char> const& ComponentInterfaceDescription::
    href () const
    {
      return *href_;
    }

    ::XMLSchema::string<char>& ComponentInterfaceDescription::
    href ()
    {
      return *href_;
    }

    void ComponentInterfaceDescription::
    href (::XMLSchema::string<char> const& e)
    {
      if (href_)
      {
        *href_ = e;
      }

      else
      {
        href_ = std::make_unique< ::XMLSchema::string<char>> (e);
      }
    }
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
    // ComponentInterfaceDescription

    ComponentInterfaceDescription::
    ComponentInterfaceDescription (::XSCRT::XML::Element<char> const& e)
    :Base (e)
    {

      ::XSCRT::Parser<char> p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element<char> e (p.next_element ());
        std::string n (::XSCRT::XML::uq_name (e.name ()));

        if (n == "label")
        {
          ::XMLSchema::string<char> t (e);
          label (t);
        }

        else if (n == "UUID")
        {
          ::XMLSchema::string<char> t (e);
          UUID (t);
        }

        else if (n == "specificType")
        {
          ::XMLSchema::string<char> t (e);
          specificType (t);
        }

        else if (n == "supportedType")
        {
          ::XMLSchema::string<char> t (e);
          supportedType_.push_back (t);
        }

        else if (n == "idlFile")
        {
          ::XMLSchema::string<char> t (e);
          idlFile_.push_back (t);
        }

        else if (n == "configProperty")
        {
          ::DAnCE::Config_Handlers::Property t (e);
          configProperty_.push_back (t);
        }

        else if (n == "port")
        {
          ::DAnCE::Config_Handlers::ComponentPortDescription t (e);
          port_.push_back (t);
        }

        else if (n == "property")
        {
          ::DAnCE::Config_Handlers::ComponentPropertyDescription t (e);
          property_.push_back (t);
        }

        else if (n == "infoProperty")
        {
          ::DAnCE::Config_Handlers::Property t (e);
          infoProperty_.push_back (t);
        }

        else if (n == "contentLocation")
        {
          ::XMLSchema::string<char> t (e);
          contentLocation (t);
        }

        else 
        {
        }
      }

      while (p.more_attributes ())
      {
        ::XSCRT::XML::Attribute<char> a (p.next_attribute ());
        std::string n (::XSCRT::XML::uq_name (a.name ()));
        if (n ==  ("href"))
        {
          ::XMLSchema::string<char> t (a);
          href (t);
        }

        else 
        {
        }
      }
    }
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
  }
}


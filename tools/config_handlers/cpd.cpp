/*
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 */
#include "cpd.hpp"

namespace DAnCE
{
  namespace Config_Handlers
  {
    // PackagedComponentImplementation

    PackagedComponentImplementation::PackagedComponentImplementation (::XMLSchema::string<char> const& name__,
                                                                      ::DAnCE::Config_Handlers::ComponentImplementationDescription const& referencedImplementation__)
    : ::XSCRT::Type ()
    , name_ (std::make_unique< ::XMLSchema::string<char>> (name__))
    , referencedImplementation_ (std::make_unique< ::DAnCE::Config_Handlers::ComponentImplementationDescription> (referencedImplementation__))
    {
    }

    PackagedComponentImplementation::PackagedComponentImplementation (PackagedComponentImplementation const& s) :
    ::XSCRT::Type (s)
    , name_ (std::make_unique< ::XMLSchema::string<char>> (*s.name_))
    , referencedImplementation_ (std::make_unique< ::DAnCE::Config_Handlers::ComponentImplementationDescription> (*s.referencedImplementation_))
    {
    }

    PackagedComponentImplementation&
    PackagedComponentImplementation::operator= (PackagedComponentImplementation const& s)
    {
      if (std::addressof(s) != this)
      {
        name (*s.name_);

        referencedImplementation (*s.referencedImplementation_);
      }

      return *this;
    }


    // PackagedComponentImplementation
    ::XMLSchema::string<char> const& PackagedComponentImplementation::
    name () const
    {
      return *name_;
    }

    void PackagedComponentImplementation::
    name (::XMLSchema::string<char> const& e)
    {
      *name_ = e;
    }

    // PackagedComponentImplementation
    ::DAnCE::Config_Handlers::ComponentImplementationDescription const& PackagedComponentImplementation::
    referencedImplementation () const
    {
      return *referencedImplementation_;
    }

    void PackagedComponentImplementation::
    referencedImplementation (::DAnCE::Config_Handlers::ComponentImplementationDescription const& e)
    {
      *referencedImplementation_ = e;
    }


    // ComponentPackageDescription

    ComponentPackageDescription::ComponentPackageDescription ()
    : ::XSCRT::Type ()
    {
    }

    ComponentPackageDescription::ComponentPackageDescription (ComponentPackageDescription const& s) :
    ::XSCRT::Type (s)
    , label_ (s.label_ ? std::make_unique< ::XMLSchema::string<char>> (*s.label_) : nullptr)
    , UUID_ (s.UUID_ ? std::make_unique< ::XMLSchema::string<char>> (*s.UUID_) : nullptr)
    , realizes_ (s.realizes_ ? std::make_unique< ::DAnCE::Config_Handlers::ComponentInterfaceDescription> (*s.realizes_) : nullptr)
    , configProperty_ (s.configProperty_)
    , implementation_ (s.implementation_)
    , infoProperty_ (s.infoProperty_)
    , href_ (s.href_ ? std::make_unique< ::XMLSchema::string<char>> (*s.href_) : nullptr)
    {
    }

    ComponentPackageDescription&
    ComponentPackageDescription::operator= (ComponentPackageDescription const& s)
    {
      if (std::addressof(s) != this)
      {
        if (s.label_)
          label (*(s.label_));
        else
          label_.reset (nullptr);

        if (s.UUID_)
          UUID (*(s.UUID_));
        else
          UUID_.reset (nullptr);

        if (s.realizes_)
          realizes (*(s.realizes_));
        else
          realizes_.reset (nullptr);

        configProperty_ = s.configProperty_;

        implementation_ = s.implementation_;

        infoProperty_ = s.infoProperty_;

        if (s.href_) href (*(s.href_));
        else href_.reset (nullptr);
      }

      return *this;
    }


    // ComponentPackageDescription
    bool ComponentPackageDescription::
    label_p () const
    {
      return !!label_;
    }

    ::XMLSchema::string<char> const& ComponentPackageDescription::
    label () const
    {
      return *label_;
    }

    void ComponentPackageDescription::
    label (::XMLSchema::string<char> const& e)
    {
      if (label_)
      {
        *label_ = e;
      }

      else
      {
        label_ = std::make_unique< ::XMLSchema::string<char>> (e);
      }
    }

    // ComponentPackageDescription
    bool ComponentPackageDescription::
    UUID_p () const
    {
      return !!UUID_;
    }

    ::XMLSchema::string<char> const& ComponentPackageDescription::
    UUID () const
    {
      return *UUID_;
    }

    void ComponentPackageDescription::
    UUID (::XMLSchema::string<char> const& e)
    {
      if (UUID_)
      {
        *UUID_ = e;
      }

      else
      {
        UUID_ = std::make_unique< ::XMLSchema::string<char>> (e);
      }
    }

    // ComponentPackageDescription
    bool ComponentPackageDescription::
    realizes_p () const
    {
      return !!realizes_;
    }

    ::DAnCE::Config_Handlers::ComponentInterfaceDescription const& ComponentPackageDescription::
    realizes () const
    {
      return *realizes_;
    }

    void ComponentPackageDescription::
    realizes (::DAnCE::Config_Handlers::ComponentInterfaceDescription const& e)
    {
      if (realizes_)
      {
        *realizes_ = e;
      }

      else
      {
        realizes_ = std::make_unique< ::DAnCE::Config_Handlers::ComponentInterfaceDescription> (e);
      }
    }

    // ComponentPackageDescription
    ComponentPackageDescription::configProperty_const_iterator ComponentPackageDescription::
    begin_configProperty () const
    {
      return configProperty_.cbegin ();
    }

    ComponentPackageDescription::configProperty_const_iterator ComponentPackageDescription::
    end_configProperty () const
    {
      return configProperty_.cend ();
    }

    size_t ComponentPackageDescription::
    count_configProperty() const
    {
      return configProperty_.size ();
    }

    // ComponentPackageDescription
    ComponentPackageDescription::implementation_const_iterator ComponentPackageDescription::
    begin_implementation () const
    {
      return implementation_.cbegin ();
    }

    ComponentPackageDescription::implementation_const_iterator ComponentPackageDescription::
    end_implementation () const
    {
      return implementation_.cend ();
    }

    size_t ComponentPackageDescription::
    count_implementation() const
    {
      return implementation_.size ();
    }

    // ComponentPackageDescription
    ComponentPackageDescription::infoProperty_const_iterator ComponentPackageDescription::
    begin_infoProperty () const
    {
      return infoProperty_.cbegin ();
    }

    ComponentPackageDescription::infoProperty_const_iterator ComponentPackageDescription::
    end_infoProperty () const
    {
      return infoProperty_.cend ();
    }

    size_t ComponentPackageDescription::
    count_infoProperty() const
    {
      return infoProperty_.size ();
    }

    // ComponentPackageDescription
    bool ComponentPackageDescription::
    href_p () const
    {
      return !!href_;
    }

    ::XMLSchema::string<char> const& ComponentPackageDescription::
    href () const
    {
      return *href_;
    }

    ::XMLSchema::string<char>& ComponentPackageDescription::
    href ()
    {
      return *href_;
    }

    void ComponentPackageDescription::
    href (::XMLSchema::string<char> const& e)
    {
      if (href_)
      {
        *href_ = e;
      }

      else
      {
        href_ = std::make_unique< ::XMLSchema::string<char>> (e);
      }
    }


    // ConnectorPackageDescription

    ConnectorPackageDescription::ConnectorPackageDescription ()
    : ::XSCRT::Type ()
    {
    }

    ConnectorPackageDescription::ConnectorPackageDescription (ConnectorPackageDescription const& s) :
    ::XSCRT::Type (s)
    , label_ (s.label_ ? std::make_unique< ::XMLSchema::string<char>> (*s.label_) : nullptr)
    , UUID_ (s.UUID_ ? std::make_unique< ::XMLSchema::string<char>> (*s.UUID_) : nullptr)
    , realizes_ (s.realizes_ ? std::make_unique< ::DAnCE::Config_Handlers::ComponentInterfaceDescription> (*s.realizes_) : nullptr)
    , configProperty_ (s.configProperty_)
    , implementation_ (s.implementation_)
    , infoProperty_ (s.infoProperty_)
    , href_ (s.href_ ? std::make_unique< ::XMLSchema::string<char>> (*s.href_) : nullptr)
    {
    }

    ConnectorPackageDescription&
    ConnectorPackageDescription::operator= (ConnectorPackageDescription const& s)
    {
      if (std::addressof(s) != this)
      {
        if (s.label_)
          label (*(s.label_));
        else
          label_.reset (nullptr);

        if (s.UUID_)
          UUID (*(s.UUID_));
        else
          UUID_.reset (nullptr);

        if (s.realizes_)
          realizes (*(s.realizes_));
        else
          realizes_.reset (nullptr);

        configProperty_ = s.configProperty_;

        implementation_ = s.implementation_;

        infoProperty_ = s.infoProperty_;

        if (s.href_) href (*(s.href_));
        else href_.reset (nullptr);
      }

      return *this;
    }


    // ConnectorPackageDescription
    bool ConnectorPackageDescription::
    label_p () const
    {
      return !!label_;
    }

    ::XMLSchema::string<char> const& ConnectorPackageDescription::
    label () const
    {
      return *label_;
    }

    void ConnectorPackageDescription::
    label (::XMLSchema::string<char> const& e)
    {
      if (label_)
      {
        *label_ = e;
      }

      else
      {
        label_ = std::make_unique< ::XMLSchema::string<char>> (e);
      }
    }

    // ConnectorPackageDescription
    bool ConnectorPackageDescription::
    UUID_p () const
    {
      return !!UUID_;
    }

    ::XMLSchema::string<char> const& ConnectorPackageDescription::
    UUID () const
    {
      return *UUID_;
    }

    void ConnectorPackageDescription::
    UUID (::XMLSchema::string<char> const& e)
    {
      if (UUID_)
      {
        *UUID_ = e;
      }

      else
      {
        UUID_ = std::make_unique< ::XMLSchema::string<char>> (e);
      }
    }

    // ConnectorPackageDescription
    bool ConnectorPackageDescription::
    realizes_p () const
    {
      return !!realizes_;
    }

    ::DAnCE::Config_Handlers::ComponentInterfaceDescription const& ConnectorPackageDescription::
    realizes () const
    {
      return *realizes_;
    }

    void ConnectorPackageDescription::
    realizes (::DAnCE::Config_Handlers::ComponentInterfaceDescription const& e)
    {
      if (realizes_)
      {
        *realizes_ = e;
      }

      else
      {
        realizes_ = std::make_unique< ::DAnCE::Config_Handlers::ComponentInterfaceDescription> (e);
      }
    }

    // ConnectorPackageDescription
    ConnectorPackageDescription::configProperty_const_iterator ConnectorPackageDescription::
    begin_configProperty () const
    {
      return configProperty_.cbegin ();
    }

    ConnectorPackageDescription::configProperty_const_iterator ConnectorPackageDescription::
    end_configProperty () const
    {
      return configProperty_.cend ();
    }

    size_t ConnectorPackageDescription::
    count_configProperty() const
    {
      return configProperty_.size ();
    }

    // ConnectorPackageDescription
    ConnectorPackageDescription::implementation_const_iterator ConnectorPackageDescription::
    begin_implementation () const
    {
      return implementation_.cbegin ();
    }

    ConnectorPackageDescription::implementation_const_iterator ConnectorPackageDescription::
    end_implementation () const
    {
      return implementation_.cend ();
    }

    size_t ConnectorPackageDescription::
    count_implementation() const
    {
      return implementation_.size ();
    }

    // ConnectorPackageDescription
    ConnectorPackageDescription::infoProperty_const_iterator ConnectorPackageDescription::
    begin_infoProperty () const
    {
      return infoProperty_.cbegin ();
    }

    ConnectorPackageDescription::infoProperty_const_iterator ConnectorPackageDescription::
    end_infoProperty () const
    {
      return infoProperty_.cend ();
    }

    size_t ConnectorPackageDescription::
    count_infoProperty() const
    {
      return infoProperty_.size ();
    }

    // ConnectorPackageDescription
    bool ConnectorPackageDescription::
    href_p () const
    {
      return !!href_;
    }

    ::XMLSchema::string<char> const& ConnectorPackageDescription::
    href () const
    {
      return *href_;
    }

    ::XMLSchema::string<char>& ConnectorPackageDescription::
    href ()
    {
      return *href_;
    }

    void ConnectorPackageDescription::
    href (::XMLSchema::string<char> const& e)
    {
      if (href_)
      {
        *href_ = e;
      }

      else
      {
        href_ = std::make_unique< ::XMLSchema::string<char>> (e);
      }
    }
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
    // PackagedComponentImplementation

    PackagedComponentImplementation::
    PackagedComponentImplementation (::XSCRT::XML::Element<char> const& element)
    :Base (element)
    {

      ::XSCRT::Parser<char> p (element);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element<char> e (p.next_element ());
        std::string n (::XSCRT::XML::uq_name (e.name ()));

        if (n == "name")
        {
          name_ = std::make_unique< ::XMLSchema::string<char>> (e);
        }

        else if (n == "referencedImplementation")
        {
          referencedImplementation_ = std::make_unique< ::DAnCE::Config_Handlers::ComponentImplementationDescription> (e);
        }

        else 
        {
        }
      }
    }

    // ComponentPackageDescription

    ComponentPackageDescription::
    ComponentPackageDescription (::XSCRT::XML::Element<char> const& element)
    :Base (element)
    {

      ::XSCRT::Parser<char> p (element);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element<char> e (p.next_element ());
        std::string n (::XSCRT::XML::uq_name (e.name ()));

        if (n == "label")
        {
          ::XMLSchema::string<char> t (e);
          label (t);
        }

        else if (n == "UUID")
        {
          ::XMLSchema::string<char> t (e);
          UUID (t);
        }

        else if (n == "realizes")
        {
          ::DAnCE::Config_Handlers::ComponentInterfaceDescription t (e);
          realizes (t);
        }

        else if (n == "configProperty")
        {
          ::DAnCE::Config_Handlers::Property t (e);
          configProperty_.push_back (t);
        }

        else if (n == "implementation")
        {
          ::DAnCE::Config_Handlers::PackagedComponentImplementation t (e);
          implementation_.push_back (t);
        }

        else if (n == "infoProperty")
        {
          ::DAnCE::Config_Handlers::Property t (e);
          infoProperty_.push_back (t);
        }

        else 
        {
        }
      }

      while (p.more_attributes ())
      {
        ::XSCRT::XML::Attribute<char> a (p.next_attribute ());
        std::string n (::XSCRT::XML::uq_name (a.name ()));
        if (n ==  ("href"))
        {
          ::XMLSchema::string<char> t (a);
          href (t);
        }

        else 
        {
        }
      }
    }

    // ConnectorPackageDescription

    ConnectorPackageDescription::
    ConnectorPackageDescription (::XSCRT::XML::Element<char> const& element)
    :Base (element)
    {

      ::XSCRT::Parser<char> p (element);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element<char> e (p.next_element ());
        std::string n (::XSCRT::XML::uq_name (e.name ()));

        if (n == "label")
        {
          ::XMLSchema::string<char> t (e);
          label (t);
        }

        else if (n == "UUID")
        {
          ::XMLSchema::string<char> t (e);
          UUID (t);
        }

        else if (n == "realizes")
        {
          ::DAnCE::Config_Handlers::ComponentInterfaceDescription t (e);
          realizes (t);
        }

        else if (n == "configProperty")
        {
          ::DAnCE::Config_Handlers::Property t (e);
          configProperty_.push_back (t);
        }

        else if (n == "implementation")
        {
          ::DAnCE::Config_Handlers::ConnectorImplementationDescription t (e);
          implementation_.push_back (t);
        }

        else if (n == "infoProperty")
        {
          ::DAnCE::Config_Handlers::Property t (e);
          infoProperty_.push_back (t);
        }

        else 
        {
        }
      }

      while (p.more_attributes ())
      {
        ::XSCRT::XML::Attribute<char> a (p.next_attribute ());
        std::string n (::XSCRT::XML::uq_name (a.name ()));
        if (n ==  ("href"))
        {
          ::XMLSchema::string<char> t (a);
          href (t);
        }

        else 
        {
        }
      }
    }
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
  }
}


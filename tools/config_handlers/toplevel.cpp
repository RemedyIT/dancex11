/*
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 */
#include "toplevel.hpp"

namespace DAnCE
{
  namespace Config_Handlers
  {
    // TopLevelPackageDescription

    TopLevelPackageDescription::TopLevelPackageDescription ()
    : ::XSCRT::Type ()
    {
    }

    TopLevelPackageDescription::TopLevelPackageDescription (TopLevelPackageDescription const& s) :
    ::XSCRT::Type (s)
    , package_ (s.package_)
    {
    }

    TopLevelPackageDescription&
    TopLevelPackageDescription::operator= (TopLevelPackageDescription const& s)
    {
      if (std::addressof(s) != this)
      {
        package_ = s.package_;
      }

      return *this;
    }


    // TopLevelPackageDescription
    TopLevelPackageDescription::package_const_iterator TopLevelPackageDescription::
    begin_package () const
    {
      return package_.cbegin ();
    }

    TopLevelPackageDescription::package_const_iterator TopLevelPackageDescription::
    end_package () const
    {
      return package_.cend ();
    }

    size_t TopLevelPackageDescription::
    count_package() const
    {
      return package_.size ();
    }
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
    // TopLevelPackageDescription

    TopLevelPackageDescription::
    TopLevelPackageDescription (::XSCRT::XML::Element<char> const& element)
    :Base (element)
    {

      ::XSCRT::Parser<char> p (element);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element<char> e (p.next_element ());
        std::string n (::XSCRT::XML::uq_name (e.name ()));

        if (n == "package")
        {
          ::DAnCE::Config_Handlers::PackageConfiguration t (e);
          package_.push_back (t);
        }

        else
        {
        }
      }
    }
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
  }
}

